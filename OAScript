
#/Users/eliyoung/Desktop/Yoni 1 OA Test/1535-674_WB-202010-014-1_Office Action.pdf


#WORKS FOR THIS ONE
#/Users/eliyoung/Desktop/PatentOAs/1535-111CIP2_WB-201703-008-1-US1_Final Office Action 4.pdf

#/Users/eliyoung/Desktop/PatentOAs/1535-727_WB-202105-023-1_Final Office Action2.pdf

#/Users/eliyoung/Desktop/PatentOAs/1535-757 WB-202109-017-1 Office Action.pdf

#/Users/eliyoung/Desktop/PatentOAs/1535-806 WB-202202-012-1 Office Action.pdf
import fitz  # PyMuPDF
from PIL import Image
import pytesseract
import io
from pdf2docx import Converter
import docx
import os
from docx import Document


class Solution():

    def __init__(self):
        pass

    def returnUserInput(self):
        self.user_input = input("Which file would you like to examine? ")
        return self.user_input


    def getInputAndExtractImageText(self):
        try:
            # Open the PDF file

            user_input = self.returnUserInput()

            self.pdf_document = fitz.open(user_input)

            # Check if the PDF has at least one page
            if self.pdf_document.page_count > 0:
                # Get the first page
                page = self.pdf_document[0]

                # Try extracting text

                # text = page.get_text("text")
                # if text:
                #     print("Extracted Text:")
                #     print(text)
                # else:
                    # If no text found, check for images
                print("No text found. Checking for images...")
                image_list = page.get_images(full=True)

                if image_list:
                    for img_index, img in enumerate(image_list, start=1):
                        # Extract the image bytes
                        base_image = self.pdf_document.extract_image(img[0])
                        image_bytes = base_image["image"]

                        # Convert to a PIL Image
                        image = Image.open(io.BytesIO(image_bytes))

                        # Apply OCR to the image
                        ocr_text = pytesseract.image_to_string(image)
                        print(f"Text extracted from image {img_index}:")
                        print(ocr_text)

                        return ocr_text
                else:
                    print("no image_list")
            else:
                print("The PDF has no pages.")

        except FileNotFoundError:
            print(f"The file '{user_input}' was not found.")
        except Exception as e:
            print(f"An error occurred: {e}")
    
    def splitReturnArray(self, stringInput):
        textArr = stringInput.split()
        print("imagetxt as arr: " + str(textArr))
        return textArr

    def putSpecificDataValuesInDictionary(self, arrInput):
        #assuming all array indices will be default

        applicationID = arrInput[22] #gets applicationID

        refField = arrInput[27].split("-")

        refNo = refField[1] #gets refNo
        dueDate = arrInput[47]

        examinerNameArr = [arrInput[42], arrInput[41]]

        examinerNameStr = ""
        examinerNameStr += arrInput[42]
        examinerNameStr += " "
        examinerNameStr += arrInput[41]

        self.examinerName = examinerNameStr

        self.fieldsToValues = dict()
        self.fieldsToValues["ID"] = applicationID
        self.fieldsToValues["refNumber"] = refNo
        self.fieldsToValues["dueDate"] = dueDate
        self.fieldsToValues["examinername"] = examinerNameStr
        #still need examiner phone number

    def convert_pdf_to_docx(self, docName): #issue here
        cv = Converter(self.user_input) #this is the name of pdf from userInput
        cv.convert(docName, start=0, end=None)
        cv.close()

    def extractFromDoc(self, docName):
        # doc = docx.Document(docName)
        try:
            # Open the Word document
            doc = Document(docName)

            # Initialize a variable to hold the extracted text
            text = ""

            # Iterate through the paragraphs in the document
            for para in doc.paragraphs:
                text += para.text + "\n"  # Add each paragraph's text and a newline for separation

            # Check if any text was extracted
            if text.strip():  # Only print if there's text
                print(text)
            else:
                print("No text found in the document.")

        except FileNotFoundError:
            print(f"The file '{self.user_input}' was not found.")
        except Exception as e:
            print(f"An error occurred: {e}")









obj = Solution()

ocr = obj.getInputAndExtractImageText()


textArr = obj.splitReturnArray(ocr)

obj.putSpecificDataValuesInDictionary(textArr)

print(str(obj.fieldsToValues))


# docName = "pdfNowDoc"

# obj.convert_pdf_to_docx(docName)

# obj.extractFromDoc(docName)

#code to parse doc:

# from docx import Document

# # Get the user input for the Word document file path
# user_input = input("Which Word file would you like to examine? ")

# try:
#     # Open the Word document
#     doc = Document(user_input)

#     # Initialize a variable to hold the extracted text
#     text = ""

#     # Iterate through the paragraphs in the document
#     for para in doc.paragraphs:
#         text += para.text + "\n"  # Add each paragraph's text and a newline for separation

#     # Check if any text was extracted
#     if text.strip():  # Only print if there's text
#         print(text)
#     else:
#         print("No text found in the document.")

# except FileNotFoundError:
#     print(f"The file '{user_input}' was not found.")
# except Exception as e:
#     print(f"An error occurred: {e}")
