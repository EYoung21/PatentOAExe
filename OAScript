

import fitz  # PyMuPDF
from PIL import Image
import pytesseract
import io
from pdf2docx import Converter
import docx
import os
from docx import Document
import re
from pypdf import PdfReader
import pypandoc

class Solution():

    def __init__(self):
        pass

    def defineUserInput(self):
        self.user_input = input("Which file would you like to examine? ")
        return self.user_input


    def extract_text_from_pdf(self):
        user_input = self.defineUserInput()
        pdf_document = fitz.open(user_input)

        extracted_text = ""
        
        for page_num in range(len(pdf_document)):
            page = pdf_document[page_num]
            # Extract text
            text = page.get_text()
            extracted_text += text
            
            # If no text found, look for images
            if not text.strip():  # No text found
                # print(f"No text found on page {page_num + 1}. Now searching for images.")
                image_list = page.get_images(full=True)

                if image_list:
                    for img_index, img in enumerate(image_list, start=1):
                        # Extract the image bytes
                        base_image = pdf_document.extract_image(img[0])
                        image_bytes = base_image["image"]

                        # Convert to a PIL Image
                        image = Image.open(io.BytesIO(image_bytes))

                        # Apply OCR to the image
                        ocr_text = pytesseract.image_to_string(image)
                        extracted_text += ocr_text
                        # print(f"Text extracted from image {img_index} on page {page_num + 1}.")

        return extracted_text
    
    def defineREGEX(self, stringInput):
        # Normalize the text, preserving newlines
        normalized_text = re.sub(r'[^\S\n]+', ' ', stringInput)

        # Define patterns
        application_id_pattern = r"\d{2}/\d{3},\d{3}"
        reference_number_pattern = r"\d{4}-[A-Za-z0-9]+"
        due_date_pattern = r"\d{2}/\d{2}/\d{4}"
        examiner_name_pattern = r"[A-Z]+,\s*[A-Z]+(?:\s[A-Z]\.?)?"
        telephone_pattern = r"whose\s+telephone\s+number\s+is\s*(?:\(?\d{3}\)?[-.\s]?){2}\d{4}"

        # Updated telephone pattern to handle line breaks
        updated_telephone_pattern = r"whose\s+telephone\s+number\s+is\s*(?:\(?\d{3}\)?[-.\s]?\n?){2}\d{4}"

        # Find patterns
        application_id = re.findall(application_id_pattern, normalized_text)
        phones = re.findall(updated_telephone_pattern, normalized_text, re.DOTALL)
        refMatches = re.findall(reference_number_pattern, normalized_text)
        dateMatches = re.findall(due_date_pattern, normalized_text)
        examiner_name_match = re.findall(examiner_name_pattern, stringInput)

        # Assign values
        self.applicationID = application_id[0] if application_id else None
        self.refrenceNumber = refMatches[1] if len(refMatches) > 1 else None
        self.dueDate = dateMatches[1] if len(dateMatches) > 1 else None
        self.examinerName = examiner_name_match[0] if examiner_name_match else None
        self.phone_numbers = [re.sub(r'\s+', '', phone) for phone in phones]  # Clean up extracted phone numbers
        # print(str(self.phone_numbers))
        self.total_refs = refMatches

        # # Debug prints
        # print(f"\nApplication ID: {self.applicationID}")
        # print(f"Reference Number: {self.refrenceNumber}")
        # print(f"Due Date: {self.dueDate}")
        # print(f"Examiner Name: {self.examinerName}")
        # print(f"Phone numbers found: {self.phone_numbers}")
        # print(f"Total references: {self.total_refs}")





#   /Users/eliyoung/Desktop/PatentOAs/1535-111CIP2_WB-201703-008-1-US1_Final Office Action 4.pdf   #didnt pickup phone #
#   /Users/eliyoung/Desktop/PatentOAs/1535-727_WB-202105-023-1_Final Office Action2.pdf
#   /Users/eliyoung/Desktop/PatentOAs/1535-740_WB-202107-012-1_Final Office Action2.pdf
#   /Users/eliyoung/Desktop/PatentOAs/1535-755_WB-202108-020-1_Final Office Action 2.pdf
#   /Users/eliyoung/Desktop/PatentOAs/1535-757 WB-202109-017-1 Office Action.pdf
#   /Users/eliyoung/Desktop/PatentOAs/1535-806 WB-202202-012-1 Office Action.pdf





obj = Solution()

text = obj.extract_text_from_pdf()

# normalized_text = re.sub(r'\s+', ' ', text)

obj.defineREGEX(text)

# print(text)
print("ID: " + str(obj.applicationID))
print("Refrence #: " + str(obj.refrenceNumber))
print("DueDate: " + str(obj.dueDate))

if obj.examinerName:
    arr = obj.examinerName.split(",")
    examinerRealName = ""
    examinerRealName += arr[1]
    examinerRealName += " "
    examinerRealName += arr[0]
print("Examiner name: " + examinerRealName)

# print("All refrences: " + str(obj.total_refs))
# print("Phone #s: " + str(obj.phone_numbers))

if obj.phone_numbers:
    examinerNumber = str(obj.phone_numbers)[24:-2]
    print("Examiner #: " + examinerNumber)




#older maybe needed functions?


    # def convert_pdf_to_docx(self, docname):
    #     pdf_file = self.user_input  # Input PDF file path
    #     docx_file = docname  # Output Word file path

    #     print(f"Converting '{pdf_file}' to '{docx_file}'...")
        
    #     # Create a PDF to DOCX converter
    #     cv = Converter(pdf_file)
    #     try:
    #         cv.convert(docx_file, start=0, end=None)  # Convert PDF to DOCX
    #         print(f"Conversion successful: '{docx_file}' created.")
    #     except Exception as e:
    #         print(f"An error occurred during conversion: {e}")
    #     finally:
    #         cv.close()  # Close the converter

    #     return docx_file
        
    # def extractFromDoc(self, docName):
    #     # doc = docx.Document(docName)
    #     try:
    #         # Open the Word document
    #         doc = Document(docName)

    #         # Initialize a variable to hold the extracted text
    #         text = ""

    #         # Iterate through the paragraphs in the document
    #         for para in doc.paragraphs:
    #             text += para.text + "\n"  # Add each paragraph's text and a newline for separation

    #         # Check if any text was extracted
    #         if text.strip():  # Only print if there's text
    #             print(text)
    #         else:
    #             print("No text found in the document.")

    #     except FileNotFoundError:
    #         print(f"The file '{self.user_input}' was not found.")
    #     except Exception as e:
    #         print(f"An error occurred: {e}")